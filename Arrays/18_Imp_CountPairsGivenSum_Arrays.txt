//User function Template for Java

class Solution {
    int getPairsCount(int[] arr, int n, int k) {
        // code here
       // Create a HashMap to store the frequency of elements in the array
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        int count = 0;

        // Traverse the array and populate the frequency map
        for (int i = 0; i < n; i++) {
            int complement = k - arr[i]; // Calculate the complement required to get the sum k
            count += frequencyMap.getOrDefault(complement, 0); // Add the count of pairs with the given complement
            frequencyMap.put(arr[i], frequencyMap.getOrDefault(arr[i], 0) + 1); // Update the frequency of the current element
        }
        return count;
    }
}


/*
step-by-step explanation of how the optimized code works with the example `[1, 5, 1, 7]` and `k = 6`:

1. Initialize an empty HashMap and a variable `count` to keep track of the pair count.
2. Start looping through the array `[1, 5, 1, 7]`.
3. For the first element `1`, calculate the complement `k - arr[i] = 6 - 1 = 5`. No pairs found yet.
4. For the second element `5`, calculate the complement `k - arr[i] = 6 - 5 = 1`. Found a pair (1, 5), so increment `count` by 1.
5. For the third element `1`, calculate the complement `k - arr[i] = 6 - 1 = 5`. Found another pair (1, 5), so increment `count` by 1.
6. For the fourth element `7`, calculate the complement `k - arr[i] = 6 - 7 = -1`. No pairs found yet.
7. Loop finishes. The final `count` is 2, indicating there are two pairs (1, 5) and (1, 5) that sum up to 6.

The function will return `count = 2` as the output.

*/
