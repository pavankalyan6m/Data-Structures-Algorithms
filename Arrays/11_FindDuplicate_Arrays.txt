import java.util.*;
class Solution {
    public int findDuplicate(int[] nums) {
    /*
    ArrayList<Integer> list = new ArrayList<>();
        int num=0,i=0;
      while(i<= nums.length)
       {
          if(!list.contains(nums[i]))
          {
              list.add(nums[i]);
          }
          else{
              num = nums[i];
              break;
          }
          i++;
       }
       */

       //Using Streams, time complexity reduces
       Optional<Integer> duplicate = Arrays.stream(nums)
                    .boxed() // Convert the int stream to Integer stream
                    .collect(Collectors.groupingBy(Function.identity(),Collectors.counting())) // Count occurrences of each element
                    .entrySet().stream()
                    .filter(entry -> entry.getValue() > 1)// Filter elements with count greater than 1 (duplicates)
                    .map(Map.Entry::getKey) // Get the duplicate element
                    .findFirst(); // Get the first duplicate element 
     return duplicate.orElse(-1);
    }
}