
class Solution 
{
    //Function to find all elements in array that appear more than n/k times.
    public int countOccurence(int[] arr, int n, int k) 
    {
        // your code here,return the answer
        int ratio = n/k;
        ArrayList<Integer> list = new ArrayList<>();
        HashSet<Integer> list1 = new HashSet<>();

        for(int i=0;i<n;i++)
        {
            list.add(arr[i]);
        }
        for(int i=0;i<n;i++)
        {
           int count=0;
           for(int j=0;j<n;j++)
           {
             if(list.get(j) == (arr[i]))
             {
                 count++;
             }
           }
           if(count>ratio)
           {
               list1.add(arr[i]);
           }
            //System.out.println(list1);
        }
        return list1.size();
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------

Optimized code for the above:

import java.util.HashMap;

class Solution {
    // Function to find all elements in the array that appear more than n/k times.
    public int countOccurence(int[] arr, int n, int k) {
        int ratio = n / k;
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        
        // Count the frequency of each element in the array
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        int count = 0;
        
        // Check if the frequency of each element is greater than n/k
        for (int num : frequencyMap.keySet()) {
            if (frequencyMap.get(num) > ratio) {
                count++;
            }
        }
        
        return count;
    }
}
