class Solution {
    public int[][] merge(int[][] intervals) {
        // Check if the input is null or contains one or zero intervals
         if (intervals == null || intervals.length <= 1) {
            return intervals;
        }

        // Sort the intervals based on their start times in ascending order
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);

        // Create a List to store the merged intervals
        List<int[]> mergedList = new ArrayList<>();
        mergedList.add(intervals[0]);

        // Iterate through the sorted intervals to merge overlapping intervals
        for (int i = 1; i < intervals.length; i++) {
            int[] currentInterval = intervals[i];
            int[] lastMerged = mergedList.get(mergedList.size() - 1);

            // If the current interval overlaps with the last merged interval
            if (currentInterval[0] <= lastMerged[1])
             {
              // Extend the last merged interval's end time if needed
                lastMerged[1] = Math.max(lastMerged[1], currentInterval[1]);
            } 
            else
             {
            // If there's no overlap, add the current interval to the merged list
                mergedList.add(currentInterval);
            }
        }

    // Convert the merged List to a 2D array and return the result
        return mergedList.toArray(new int[mergedList.size()][]);

    }
}