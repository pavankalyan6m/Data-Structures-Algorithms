class Solution {
    static int minJumps(int[] arr) {
        // your code here

        // Initialize variables
        int cur = arr[0]; // 'cur' represents the number of steps that can be taken from the current index.
        int max = arr[0]; // 'max' represents the farthest index that can be reached from the current position.
        int n = arr.length; // 'n' is the length of the input array.
        int i = 0; // 'i' is used as the index variable to traverse the array.
        int c = 0; // 'c' represents the current number of jumps made.

        while (i < n - 1) {
            // Loop through the array until the last index (n - 1) is reached.

            cur--; // Decrement the current number of steps available.

            max--; // Decrement the maximum reach from the current position.

            i++; // Move to the next index.

            // Update 'max' with the maximum value between the current 'max' and the value at the current index.
            // This step ensures we keep track of the farthest index that can be reached from the current position.
            max = Math.max(max, arr[i]);

            if (cur == 0) {
                // If 'cur' becomes 0, it means we have used all the steps available from the current index.
                // Now, we need to make a jump to continue.

                cur = max; // Set 'cur' to the value of 'max' since we are making a jump.
                c++; // Increment the 'c' variable to indicate that a jump has been made.
            }
        }

        // After the loop, check if we can reach the last index and return the minimum number of jumps required.

        return (cur >= 0) ? (cur == arr[n - 1]) ? c : c + 1 : -1;
        // Explanation of the return statement:
        // If 'cur' is greater than or equal to 0, it means we have steps left to reach the last index.
        // If 'cur' is equal to the value at the last index, it means we can reach the last index without an extra jump, so return 'c'.
        // Otherwise, we need an extra jump to reach the last index, so return 'c + 1'.
        // If 'cur' is negative, it means we cannot reach the last index, so return -1.
    }
}
