class Solution {
    public void nextPermutation(int[] nums) {        
      
       int n = nums.length;
        
        // Step 1: Find the first decreasing element from the right side of the array.
        int i = n - 2;//start from second-to-last element
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        // Step 2: If i is greater than or equal to 0, find the smallest element greater than nums[i] from the right side.
        if (i >= 0) {
            int j = n - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }

        // Step 3: Reverse the sub-array from i+1 to the end to get the next permutation.
        reverse(nums, i + 1);
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private void reverse(int[] nums, int start) {
        int i = start;
        int j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
}