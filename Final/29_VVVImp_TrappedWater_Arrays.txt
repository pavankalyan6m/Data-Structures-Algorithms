class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
        // Your code here
         long waterTrapped = 0; // Variable to store the total water trapped
        int left = 0; // Left pointer starting from the beginning of the array
        int right = n - 1; // Right pointer starting from the end of the array
        int leftMax = 0; // Maximum height encountered from the left side
        int rightMax = 0; // Maximum height encountered from the right side

        while (left < right) { // Loop until the left and right pointers meet or cross
            if (arr[left] < arr[right]) { // If height at left is less than height at right
                if (arr[left] > leftMax) { // If current height is greater than leftMax
                    leftMax = arr[left]; // Update leftMax to the current height
                } else {
                    waterTrapped += leftMax - arr[left]; // Calculate water trapped at current block and add to total
                }
                left++; // Move the left pointer to the right
            } else { // If height at right is less than or equal to height at left
                if (arr[right] > rightMax) { // If current height is greater than rightMax
                    rightMax = arr[right]; // Update rightMax to the current height
                } else {
                    waterTrapped += rightMax - arr[right]; // Calculate water trapped at current block and add to total
                }
                right--; // Move the right pointer to the left
            }
        }

        return waterTrapped; // Return the total water trapped between the blocks
    }
    
}
